<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #26. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #27. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) --> 
<mapper namespace="pekresns">


	<!-- 인기 리스트 보기 (페이징처리X) -->
	<resultMap type="java.util.HashMap" id="getBoardListMap">
		<result property="RNO" 	column="rno" 	javaType="String" />
 		<result property="SEQ_TBL_BOARD" 	column="seq_tbl_board" 	javaType="String" />
 		<result property="BOARD_HEART" 	column="board_heart" 	javaType="String" />
 		<result property="FK_LOGIN_ID" 	column="fk_login_id" 	javaType="String" />
 		<result property="BOARD_CONTENT" 	column="board_content" 	javaType="String" />
 		<result property="BOARD_TIME" 	column="board_time" 	javaType="String" />
 		<result property="BOARD_RECNT" 	column="board_recnt" 	javaType="String" />
 		<result property="BIMG_FILENAME" 	column="bimg_filename" 	javaType="String" />
	</resultMap>
	<select id="getBoardList2" resultMap="getBoardListMap">
		
	select B.seq_tbl_board, B.board_heart, B.fk_login_id, B.board_content, B.board_time, B.board_recnt, I.bimg_filename
		from tbl_board B left join tbl_bimage I
		on B.seq_tbl_board = I.seq_tbl_board
		where B.board_status = 0
	order by B.board_heart desc
	
	</select>
	
	
	<!-- 인기 리스트 보기 -->
	<resultMap type="java.util.HashMap" id="getBoardListMap2">
		<result property="RNO" 	column="rno" 	javaType="String" />
 		<result property="SEQ_TBL_BOARD" 	column="seq_tbl_board" 	javaType="String" />
 		<result property="BOARD_HEART" 	column="board_heart" 	javaType="String" />
 		<result property="FK_LOGIN_ID" 	column="fk_login_id" 	javaType="String" />
 		<result property="BOARD_CONTENT" 	column="board_content" 	javaType="String" />
 		<result property="BOARD_TIME" 	column="board_time" 	javaType="String" />
 		<result property="BOARD_RECNT" 	column="board_recnt" 	javaType="String" />
 		<result property="BIMG_FILENAME" 	column="bimg_filename" 	javaType="String" />
	</resultMap>
	<select id="getBoardList" resultMap="getBoardListMap2">
	
	
		select rno, seq_tbl_board, board_heart, fk_login_id, board_content, board_time, board_recnt, bimg_filename
				from 
				(
				select rownum as rno, V.*
				from
				(
				select B.seq_tbl_board, B.board_heart, B.fk_login_id, B.board_content, B.board_time, B.board_recnt, I.bimg_filename
				from tbl_board B left join tbl_bimage I
				on B.seq_tbl_board = I.seq_tbl_board
				where B.board_status = 0
				order by B.board_heart desc
				) V
				) T
		where rno between 1 and 12
	
	</select>
	
	
	<!-- 글쓴이 별명과 프사 보기 -->
	<resultMap type="java.util.HashMap" id="showUserMap">
		<result property="LOGIN_NAME" 	column="login_name" 	javaType="String" />
		<result property="UIMG_PROFILE_FILENAME" 	column="uimg_profile_filename" 	javaType="String" />
	</resultMap>
	<select id="showUser" parameterType="String" resultMap="showUserMap">
		select L.login_name, U.uimg_profile_filename
				from tbl_login L join tbl_uimage U 
				on L.login_id = U.fk_login_id
		where L.login_id = #{fk_login_id}
	</select>
	
	
	<!-- 한 게시글의 덧글 보기 -->
	<resultMap type="java.util.HashMap" id="showReMap">
		<result property="RE_SEQ" column="re_seq" javaType="String" />
		<result property="SEQ_TBL_BOARD" column="seq_tbl_board" javaType="String" />
		<result property="RE_ID" column="re_id" javaType="String" />
		<result property="RE_CONTENT" column="re_content" javaType="String" />
		<result property="RE_DATE" column="re_date" javaType="String" />
		<result property="RE_STATUS" column="re_status" javaType="String" />
		<result property="RE_FK_SEQ" column="re_fk_seq" javaType="String" />
		<result property="RE_GROUPNO" column="re_groupno" javaType="String" />
		<result property="RE_DEPTHNO" column="re_depthno" javaType="String" />
		<result property="LOGIN_NAME" column="login_name" javaType="String" />
		<result property="UIMG_PROFILE_FILENAME" column="uimg_profile_filename" javaType="String" />
	</resultMap>
	<select id="showRe" parameterType="String" resultMap="showReMap">
		select R.re_seq, R.seq_tbl_board, R.re_id, R.re_content, to_char(R.re_date, 'yyyy-mm-dd') as re_date, R.re_status, R.re_fk_seq, R.re_groupno, R.re_depthno, L.login_name, U.uimg_profile_filename
				from tbl_re R left join tbl_login L
				on R.re_id = L.login_id
				left join tbl_uimage U
				on L.login_id = U.fk_login_id
				where R.seq_tbl_board = #{seq_tbl_board} and R.re_status = 1
				start with R.re_fk_seq = 0
				connect by prior R.re_seq = R.re_fk_seq
				order siblings by R.re_groupno asc, R.re_seq asc
	</select>
	
	
	<!-- 한 게시글의 태그 보기 -->
	<select id="showTag" parameterType="String" resultType="com.spring.pek.model.TagVO">
		select seq_tbl_tag, tag_content
				from tbl_tag
		where seq_tbl_board = #{seq_tbl_board}
	</select>
	
	
	<!-- 한 게시글의 위치주소 보기 -->
	<select id="showLoc" parameterType="String" resultType="com.spring.pek.model.MapVO">
		select map_name
				from tbl_map
		where fk_seq_tbl_board = #{seq_tbl_board}
	</select>
	
	<!-- 좋아요 누르기 -->
	<insert id="addHeart" parameterType="HashMap">
		insert into tbl_heart (fk_login_id, fk_seq_tbl_board, heart_getid)
		values (#{login_id}, #{seq_tbl_board}, #{fk_login_id})
	</insert>
	<!-- 좋아요 눌렀을 때 게시글의 하트 갯수 증가 -->
	<update id="addHeartCnt" parameterType="String">
		update tbl_board set board_heart = board_heart + 1
		where seq_tbl_board = #{seq_tbl_board}
	</update>
	
	<!-- 이미 좋아요 눌렀는지 확인하기 -->
	<select id="HeartedUser" parameterType="HashMap" resultType="int">
		select count(*) as cnt
				from tbl_heart
		where fk_seq_tbl_board = #{seq_tbl_board} and fk_login_id= #{login_id}
	</select>
	
	<!-- 하트 아이콘 바꿔주기 위한 하트 여부 확인 -->
	<select id="heartCheck" parameterType="HashMap" resultType="com.spring.pek.model.HeartVO">
		select fk_login_id, fk_seq_tbl_board, heart_getid 
				from tbl_heart
		where fk_seq_tbl_board = #{seq_tbl_board} and fk_login_id = #{login_id}
	</select>
	
	<!-- 하트 취소 -->
	<delete id="deleteHeart" parameterType="HashMap">
		delete tbl_heart
		where fk_login_id = #{login_id} and fk_seq_tbl_board = #{seq_tbl_board}
	</delete>
	<!-- 취소됐을 때 하트 갯수 감소 -->
	<update id="deleteHeartCnt" parameterType="String">
		update tbl_board set board_heart = board_heart - 1
		where seq_tbl_board= #{seq_tbl_board}
	</update>
	
	
	<!-- 하트 갯수 갱신하기 -->
	<select id="heartCounting" parameterType="String" resultType="int">
		select board_heart
		from tbl_board
		where seq_tbl_board = #{seq_tbl_board}
	</select>
	
	<!-- 최대 groupno 알아오기  -->
	<select id="maxGroupno" resultType="String">
		select max(re_groupno)+1
		from tbl_re
	</select>
	<!-- 댓글 쓰기 -->
	<insert id="writeReply" parameterType="HashMap">
		insert into tbl_re (re_seq, seq_tbl_board, re_id, re_content, re_date, re_status, re_fk_seq, re_groupno, re_depthno)
		values (re_seq.nextval, #{seq_tbl_board}, #{login_id}, #{re_content}, sysdate, default, default, #{maxGroupno}, default)
	</insert>
	<!-- 댓글 썼을 때 댓글 갯수 증가 -->
	<update id="addReCnt" parameterType="String">
		update tbl_board set board_recnt = board_recnt +1
		where seq_tbl_board = #{seq_tbl_board}
	</update>
	
	<!-- 댓글 갯수 갱신하기 -->
	<select id="reCounting" parameterType="String" resultType="int">
		select board_recnt
		from tbl_board
		where seq_tbl_board = #{seq_tbl_board}
	</select>
	<!-- 대댓글 쓰기 -->
	<insert id="writeReRe" parameterType="HashMap">
		insert into tbl_re (re_seq, seq_tbl_board, re_id, re_content, re_date, re_status, re_fk_seq, re_groupno, re_depthno)
		values (re_seq.nextval, #{seq_tbl_board}, #{login_id}, #{re_content}, sysdate, default, #{re_seq}, #{re_groupno}, 1)
	</insert>
	<!-- 원글 삭제하기 -->
	<delete id="deleteReply" parameterType="HashMap">
		delete tbl_re
		where re_groupno = #{re_groupno}
	</delete>
	<!-- 대댓글 삭제하기 -->
	<delete id="deleteReRe" parameterType="HashMap">
		delete tbl_re
		where re_seq = #{re_seq}
	</delete>
	<!-- 댓글 갯수 감소하기 -->
	<update id="deleteReCnt" parameterType="HashMap">
		update tbl_board set board_recnt = board_recnt -1
		where seq_tbl_board = #{seq_tbl_board}
	</update>
	<!-- 대댓글 달린 원글 지웠을때 지운 댓글 갯수만큼 감소하기 -->
	<select id="replyCount" parameterType="HashMap" resultType="String">
		select count(*)
			from tbl_re
		where re_groupno = #{re_groupno}
	</select>
	<update id="deleteReCntByGroupno" parameterType="HashMap">
		update tbl_board set board_recnt = board_recnt - #{replyCount}
		where seq_tbl_board = #{seq_tbl_board}
	</update>



	<!-- 글쓰기 -->
	<insert id="addBoard" parameterType="HashMap" >
		insert into tbl_board (seq_tbl_board, fk_login_id, board_content, board_status, board_time)
			values (seq_tbl_board.nextval, #{login_id}, #{board_content}, #{board_status}, sysdate)
	</insert>
	<!-- 가장 최근에 쓴 글번호 알기 -->
	<select id="maxSeq" resultType="int">
		select max(seq_tbl_board)
		from tbl_board
	</select>
	
	<!-- 태그 넣기 -->
	<insert id="addTag" parameterType="HashMap">
		insert into tbl_tag(seq_tbl_tag, seq_tbl_board, tag_content)
		values (seq_tbl_tag.nextval, #{maxseq}, #{tag})
	</insert>
	
	<!-- 위치 넣기 -->
	<insert id="addLoc" parameterType="HashMap">
		insert into tbl_map (fk_seq_tbl_board, map_we, map_ky, map_name)
		values(#{maxseq}, #{map_we}, #{map_ky}, #{map_name})
	</insert>
	
	<!-- 이미지 넣기 -->
	<insert id="addBimage" parameterType="HashMap">
		insert into tbl_bimage (bimg_seq, seq_tbl_board, bimg_filename, bimg_orgfilename, bimg_filesize)
		values (bimg_seq.nextval, #{maxseq}, #{newFileName}, #{originalFilename}, #{fileSize})
	</insert>
	
	
	<!-- 글삭제하기(스테이터스 3으로 변경) -->
	<update id="updateBoard" parameterType="String">
		update tbl_board set board_status = 3
		where seq_tbl_board = #{seq_tbl_board}
	</update>
	<!-- 한 게시글의 태그 모두 삭제 -->
	<delete id="deleteTag" parameterType="String">
		delete tbl_tag
		where seq_tbl_board = #{seq_tbl_board}
	</delete>
	<!-- 위치 삭제 -->
	<delete id="deleteMap" parameterType="String">
		delete tbl_map
		where fk_seq_tbl_board = #{seq_tbl_board}
	</delete>
	<!-- 한 게시글의 하트 모두 삭제 -->
	<delete id="deleteHeartAll" parameterType="String">
		delete tbl_heart
		where fk_seq_tbl_board = #{seq_tbl_board}
	</delete>
	<!-- 한 게시글의 댓글 모두 삭제 -->
	<delete id="deleteReAll" parameterType="String">
		delete tbl_re
		where seq_tbl_board = #{seq_tbl_board}
	</delete>
	
	
	<!-- 지울 파일 이름 알아오기 -->
	<select id="fileName" parameterType="String" resultType="String">
		select bimg_filename
		from tbl_bimage
		where seq_tbl_board = #{seq_tbl_board}
	</select>
	
	<!-- 이미지 지우기 -->
	<delete id="deleteImg">
		delete tbl_bimage
		where seq_tbl_board = #{seq_tbl_board}
	</delete>
	
	
	<!-- 모든 태그 보기 -->
	<select id="showAllTag" resultType="com.spring.pek.model.TagVO">
		select tag_content
		from tbl_tag
	</select>
	
	
	<!-- 한 회원이 받은 쪽지 보기 -->
	<resultMap type="java.util.HashMap" id="getMsgMap">
		<result property="SEQ_TBL_MSG" column="seq_tbl_msg" javaType="String" />
		<result property="MSG_SEND" column="msg_send" javaType="String" />
		<result property="UIMG_PROFILE_FILENAME" column="uimg_profile_filename" javaType="String" />
		<result property="LOGIN_NAME" column="login_name" javaType="String" />
		<result property="MSG_CONTENT" column="msg_content" javaType="String" />
		<result property="MSG_DATE" column="msg_date" javaType="String" />
	</resultMap>
	<select id="getMessage" parameterType="String" resultMap="getMsgMap">
		select M.seq_tbl_msg, M.msg_send, U.uimg_profile_filename, L.login_name,
			      case when length(M.msg_content) > 13 
			          then substr(M.msg_content, 0, 11) || '...' else M.msg_content end as msg_content, 
			      case when to_date(to_char(M.msg_date, 'yy-mm-dd'), 'yy-mm-dd') = to_date(to_char(sysdate, 'yy-mm-dd'), 'yy-mm-dd') 
			          then to_char(M.msg_date, 'hh24:mi:ss') 
			          else to_char(M.msg_date, 'yy-mm-dd') 
			          end as msg_date
			from tbl_msg M left join tbl_uimage U
			on M.fk_login_id = U.fk_login_id
			left join tbl_login L
			on M.msg_send = L.login_id
			where M.fk_login_id = #{login_id}
		order by M.seq_tbl_msg desc
	</select>

</mapper>