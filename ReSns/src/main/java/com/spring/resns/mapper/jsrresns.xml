<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #26. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="jsrresns">


<!-- 팔로우 리스트  가져오기 -->
<resultMap type="HashMap" id="getFollowListMap">
<result property="login_id" 			column="login_id" 					javaType="String" />
<result property="follow_id" 			column="follow_id" 					javaType="String" />
<result property="follow_name" 			column="follow_name" 				javaType="String" />
<result property="follow_pimage" 	column="follow_proile_image" 		javaType="String" />
</resultMap>
<select id="getFollowList" parameterType="HashMap" resultMap="getFollowListMap">
select F.fk_login_id as login_id, F.follow_id as follow_id, L.login_name as follow_name, nvl(M.uimg_profile_filename,'profile0.png') as follow_proile_image
from tbl_follow F left join tbl_login L
on F.follow_id = L.login_id
left join tbl_uimage M
on F.follow_id = M.fk_login_id
where F.fk_login_id = #{login_id}
</select>
<!-- 팔로우 리스트 가져오기 끝 -->




<!-- 팔로워 리스트  가져오기 -->
<resultMap type="HashMap" id="getFollowerListMap">
<result property="login_id" 			column="login_id" 					javaType="String" />
<result property="follower_id" 			column="follower_id" 					javaType="String" />
<result property="follower_name" 			column="follower_name" 				javaType="String" />
<result property="follower_pimage" 	column="follower_proile_image" 		javaType="String" />
</resultMap>
<select id="getFollowerList" parameterType="HashMap" resultMap="getFollowerListMap">
select F.follow_id as login_id, F.fk_login_id as follower_id, L.login_name as follower_name, nvl(M.uimg_profile_filename,'profile0.png') as follower_proile_image
from tbl_follow F left join tbl_login L
on F.fk_login_id = L.login_id
left join tbl_uimage M
on F.fk_login_id = M.fk_login_id
where F.follow_id = #{login_id}
</select>
<!-- 팔로워 리스트 가져오기 끝 -->






<!-- 중복팔로우 확인 시작 -->
<select id="followCheck" parameterType="HashMap" resultType="Integer">
select count(*)
from tbl_follow
where fk_login_id = #{login_id} and follow_id =  #{follow_id}
</select>

<!-- 나를 팔로우 하고 있는지 확인하기. follower_id에는 상대방의 아이디가 들어간다. -->
<select id="followerCheck" parameterType="HashMap" resultType="Integer">
select count(*)
from tbl_follow
where fk_login_id = #{follower_id} and follow_id = #{login_id}
</select>



<!-- 중복팔로우 확인 끝-->

<!-- 팔로우하기 -->
<insert id="followAdd" parameterType="HashMap">
insert into tbl_follow(follow_seq, fk_login_id, follow_id)
values(follow_seq.nextval, #{login_id}, #{follow_id})
</insert>

<update id="followupdate" parameterType="HashMap">
update tbl_user set user_ing = user_ing+1
where fk_login_id = #{login_id}
</update>

<update id="followerupdate" parameterType="HashMap">
update tbl_user set user_ed = user_ed+1
where fk_login_id = #{follow_id}
</update>

<!-- 팔로우 시퀀스 알아오기 위해서 -->
<select id="followSeqCheck" parameterType="HashMap" resultType="String">
select follow_seq
from tbl_follow
where fk_login_id = #{login_id} and follow_id = #{follow_id}
</select> 

 <insert id="followalaram" parameterType="HashMap">
insert into tbl_alarm(seq_tbl_alarm,fk_follow_seq,fk_login_id,alarm_userid,alarm_type,alarm_status,alarm_time)
values(seq_tbl_alarm.nextval,#{follow_seq},#{login_id},#{follow_id},4,default,default)
</insert> 


<!-- 팔로우하기  끝-->



<!-- 언팔로우 시작 -->

<delete id="unFollow" parameterType="HashMap">
delete from tbl_follow
where fk_login_id = #{login_id} and follow_id = #{follow_id}
</delete>

<update id="unfollowupdate" parameterType="HashMap">
update tbl_user set user_ing = user_ing-1
where fk_login_id = #{login_id}
</update>

<update id="unfollowerupdate" parameterType="HashMap">
update tbl_user set user_ed = user_ed-1
where fk_login_id = #{follow_id}
</update>
<!-- 언팔로우 끝-->




<!-- 팔로우 게시글 리스트 가져오기 시작 -->
<resultMap type="HashMap" id="FollowBoardMap">
<result property="follow_name" 				column="follow_name" 				javaType="String" />
<result property="seq_tbl_board" 			column="seq_tbl_board" 				javaType="String" />
<result property="follow_proile_image" 		column="follow_proile_image" 		javaType="String" />
<result property="follow_id" 				column="follow_id" 					javaType="String" />
<result property="board_content" 			column="board_content" 				javaType="String" />
<result property="board_time" 				column="board_time" 				javaType="String" />
<result property="board_heart" 				column="board_heart" 				javaType="String" />
<result property="board_recnt" 				column="board_recnt" 				javaType="String" />
<result property="board_status" 			column="board_status" 				javaType="String" />
<result property="bimg_filename" 			column="bimg_filename" 				javaType="String" />
<result property="bimg_orgfilename" 		column="bimg_orgfilename" 			javaType="String" />
<result property="bimg_filesize" 			column="bimg_filesize" 				javaType="String" />
<result property="map_we" 					column="map_we" 					javaType="String" />
<result property="ma_ky" 					column="ma_ky" 						javaType="String" />
<result property="map_name" 				column="map_name" 					javaType="String" />
<result property="title" 				column="title" 					javaType="String" />
</resultMap>

<select id="FollowBoardView" parameterType="HashMap" resultMap="FollowBoardMap">
select rno 
,follow_name
,follow_proile_image
,follow_id
,seq_tbl_board
,board_content
,title
,board_time
,board_heart
,board_recnt
,board_status
,bimg_filename
,bimg_orgfilename
,bimg_orgfilename
,bimg_filesize
,map_we
,ma_ky
,map_name
from
(
select rownum as rno,V.*
from
(
select L.login_name as follow_name
      ,M.uimg_profile_filename as follow_proile_image
      ,F.follow_id as follow_id
      ,B.seq_tbl_board as seq_tbl_board
      ,B.board_content as board_content
      ,case when length(B.board_content) > 10
              then substr(B.board_content, 1, 10)||'...'
              else B.board_content
              end 
         as title   
      ,B.board_time as board_time
      ,B.board_heart as board_heart
      ,B.board_recnt as board_recnt
      ,B.board_status as board_status
      ,nvl(I.bimg_filename,'default0.png') as bimg_filename
      ,I.bimg_orgfilename as bimg_orgfilename
      ,I.bimg_filesize as bimg_filesize
      ,M.map_we as map_we
      ,M.map_ky as ma_ky
      ,M.map_name as map_name
from tbl_board B left outer join tbl_bimage I
on B.seq_tbl_board = I.seq_tbl_board
left outer join tbl_map M
on B.seq_tbl_board = M.fk_seq_tbl_board 
left join tbl_follow F
on B.fk_login_id = F.follow_id
left join tbl_login L
on F.follow_id = L.login_id
left join tbl_uimage M
on F.follow_id = M.fk_login_id
where F.fk_login_id = #{login_id}
and B.board_status = 0
order by B.seq_tbl_board desc
)V
)T
where T.rno >= #{startRno} and T.rno <![CDATA[<=]]> #{endRno}
order by T.board_time desc
</select>
<!--  팔로우 게시글 리스트 가져오기 끝 -->



<!-- 팔로우 게시글 댓글 가져오기  시작 -->
<resultMap type="HashMap" id="followReMap">
<result property="re_seq" 					column="re_seq" 				javaType="String" />
<result property="seq_tbl_board" 			column="seq_tbl_board" 			javaType="String" />
<result property="re_id" 					column="re_id" 					javaType="String" />
<result property="re_content" 				column="re_content" 			javaType="String" />
<result property="re_date" 					column="re_date" 				javaType="String" />
<result property="re_status" 				column="re_status" 				javaType="String" />
<result property="re_fk_seq" 				column="re_fk_seq" 				javaType="String" />
<result property="re_groupno" 				column="re_groupno" 			javaType="String" />
<result property="re_depthno" 				column="re_depthno" 			javaType="String" />
<result property="login_name" 				column="login_name" 			javaType="String" />
<result property="uimg_profile_filename"	column="uimg_profile_filename" 	javaType="String" />
</resultMap>
<select id="followreList" parameterType="String" resultMap="followReMap">
select R.re_seq, R.seq_tbl_board, R.re_id, R.re_content, to_char(R.re_date, 'yyyy-mm-dd') as re_date, 
R.re_status, R.re_fk_seq, R.re_groupno, R.re_depthno, L.login_name, U.uimg_profile_filename
from tbl_re R left join tbl_login L
on R.re_id = L.login_id
left join tbl_uimage U
on L.login_id = U.fk_login_id
where seq_tbl_board = #{seq_tbl_board} and R.re_status = 1
start with R.re_fk_seq = 0
connect by prior R.re_seq = R.re_fk_seq
order siblings by R.re_groupno asc, R.re_seq asc
</select> 
<!-- 팔로우 게시글 댓글 가져오기 끝 -->


<!-- 페이징  처리한 댓글 가져오기 -->
<select id="followreList2" parameterType="HashMap" resultMap="followReMap">
select re_seq, seq_tbl_board, re_id, re_content, re_date, 
re_status, re_fk_seq, re_groupno, re_depthno, login_name, uimg_profile_filename
from
(
select rownum rno, V.*
from
(
select R.re_seq, R.seq_tbl_board, R.re_id, R.re_content, to_char(R.re_date, 'yyyy-mm-dd') as re_date, 
R.re_status, R.re_fk_seq, R.re_groupno, R.re_depthno, L.login_name, U.uimg_profile_filename
from tbl_re R left join tbl_login L
on R.re_id = L.login_id
left join tbl_uimage U
on L.login_id = U.fk_login_id
where seq_tbl_board = #{seq_tbl_board} and R.re_status = 1
start with R.re_fk_seq = 0
connect by prior R.re_seq = R.re_fk_seq
order siblings by R.re_groupno asc, R.re_seq asc
)V
)T
where T.rno between #{startrno} and #{endrno}
</select>
<!--  페이징 처리한 댓글 끝 -->


<!--  팔로우 게시글 더 보기 자세히 보기 -->
<select id="getConVeiw" parameterType="String" resultType="String">
select board_content
from tbl_board
where seq_tbl_board = #{seq_tbl_board}
</select>
<!--  팔로우 게시글 더 보기 자세히 보기 -->


<!--  태그가져오기 -->
<select id="getTag2" parameterType="String" resultType="com.spring.pek.model.TagVO">
select seq_tbl_tag , tag_content
from tbl_tag
where seq_tbl_board = #{seq_tbl_board}
</select>
<!--  태그가져오기 -->


<!-- 백문백답 인서트하기 -->
<insert id="queAddEnd" parameterType="com.spring.jsr.model.QuestionBoardVO">
insert into tbl_q(seq_tbl_q, fk_login_id, q_content, q_status, q_date,q_askid)
values(seq_tbl_q.nextval,#{fk_login_id},#{q_content},default,default,#{q_askid})
</insert>


<!-- 시퀀스 알아오기 -->
<select id="seqGet" parameterType="com.spring.jsr.model.QuestionBoardVO" resultType="String">
select seq_tbl_q
from tbl_q
where fk_login_id = #{fk_login_id} and q_askid = #{q_askid} and q_content = #{q_content}
</select> 


<insert id="questionAlaram" parameterType="HashMap">
insert into tbl_alarm(seq_tbl_alarm,fk_seq_tbl_q,fk_login_id,alarm_userid,alarm_type,alarm_status,alarm_time)
values(seq_tbl_alarm.nextval,#{seq_tbl_q},#{q_askid},#{fk_login_id},5,default,default)
</insert>


<!-- 백문백답 인서트하기 -->


<!-- 백문백답 리스트 불러오기 -->
<select id="getQuList" parameterType="HashMap" resultType="com.spring.jsr.model.QuestionBoardVO">
select seq_tbl_q , fk_login_id, q_status, q_date, q_askid, q_content
from
(
select rownum rno, seq_tbl_q , fk_login_id, q_status, q_date, q_askid, q_content
from 
(
select seq_tbl_q, fk_login_id, q_status, q_date, q_askid
				,case when length(q_content) > 30
              then substr(q_content, 1, 20)||'...'
              else q_content
              end 
         	as q_content
from tbl_q
where fk_login_id = #{fk_login_id}
order by q_date desc
)V
)T
where  T.rno >= #{startRno} and T.rno <![CDATA[<=]]> #{endRno}
order by T.q_date desc
</select>
<!-- 백문백답 리스트 불러오기 -->


<!-- 검색어 있는 백문백답 리스트 불러오기 -->
<select id="getQuList2" parameterType="HashMap" resultType="com.spring.jsr.model.QuestionBoardVO">
select seq_tbl_q , fk_login_id, q_status, q_date, q_askid, q_content
from
(
select rownum rno, seq_tbl_q , fk_login_id, q_status, q_date, q_askid, q_content
from 
(
select seq_tbl_q, fk_login_id, q_status, q_date, q_askid
				,case when length(q_content) > 30
              then substr(q_content, 1, 20)||'...'
              else q_content
              end 
         	as q_content
from tbl_q
where fk_login_id = #{fk_login_id}
order by q_date desc
)V
)T
where  T.rno >= #{startRno} and T.rno <![CDATA[<=]]> #{endRno}
order by T.q_date desc
</select>
<!-- 검색어 있는 백문백답 리스트 불러오기 -->

<!-- 검색어 없는 토탈 카운트 -->
<select id="getTotalCount" parameterType="HashMap" resultType="Integer">
 select count(*)
 from tbl_q
 where fk_login_id = #{fk_login_id}
</select>
<!-- 검색어 없는 토탈 카운트 끝 -->

<!-- 검색어 있는 토탈 카운트 -->
<select id="getTotalCount2" parameterType="HashMap" resultType="Integer">
 select count(*)
 from tbl_q
 where fk_login_id = #{fk_login_id}
 and q_content like '%' || #{qsearch} || '%'
</select>
<!-- 검색어 있는 토탈 카운트 끝 -->


<!--  백문백답 답변 가져오기 -->
<resultMap type="HashMap" id="getReMap">
<result property="fk_seq_tbl_q" 					column="fk_seq_tbl_q" 				javaType="String" />
<result property="fk_login_id" 					column="fk_login_id" 				javaType="String" />
<result property="a_content" 					column="a_content" 				javaType="String" />
<result property="a_date" 					column="a_date" 				javaType="String" />
<result property="fk_login_name" 					column="login_name" 				javaType="String" />
</resultMap>
<select id="getRp" parameterType="String" resultMap="getReMap">
select A.fk_seq_tbl_q, A.fk_login_id, A.a_content, A.a_date, L.login_name
from tbl_a A join tbl_login L
on A.fk_login_id = L.login_id
where A.fk_seq_tbl_q = #{seq_tbl_q}
</select>
<!--  백문백답 답변 가져오기 끝 -->

<!-- 백문백답 질문 한개 가져오기 -->
<select id="getQView" parameterType="String" resultType="com.spring.jsr.model.QuestionBoardVO">
select seq_tbl_q, fk_login_id, q_status, q_date, q_askid,q_content,case when length(q_content) > 15
              then substr(q_content, 1, 10)||'...'
              else q_content
              end 
         	as title
from tbl_q
where seq_tbl_q = #{seq_tbl_q}
</select>
<!-- 백문백답 질문 한개 가져오기 끝 -->


<!-- 백문 백답 답변 달기 -->
<insert id="QboardRe" parameterType="com.spring.jsr.model.QuestionBoardReplyVO">
insert into tbl_a(fk_seq_tbl_q, fk_login_id, a_content, a_date)
values(#{fk_seq_tbl_q},#{fk_login_id},#{a_content}, default)
</insert>
<!-- 백문 백답 답변 달기 끝 -->


<!--  백문백답 질문 상태값 변경 -->
<update id="Qstaup" parameterType="String">
update tbl_q set q_status = 1
where seq_tbl_q = #{fk_seq_tbl_q}
</update>
<!--  백문백답 질문 상태값 변경  끝-->


<!-- 백문백답 답변에 대한 알람주기 -->
 <insert id="quesReAlaram" parameterType="HashMap">
insert into tbl_alarm(seq_tbl_alarm,fk_seq_tbl_q,fk_login_id,alarm_userid,alarm_type,alarm_status,alarm_time)
values(seq_tbl_alarm.nextval,#{fk_seq_tbl_q},#{fk_login_id},#{q_askid},6,default,default)
</insert> 
<!-- 백문백답 답변에 대한 알람주기 -->



<!-- 백문백답  질문 삭제하기 -->
<delete id="qdel" parameterType="String">
delete from tbl_q
where seq_tbl_q = #{seq_tbl_q}
</delete>
<!-- 백문백답  질문 삭제하기  끝-->



<!-- 백문백답 답변 삭제하기 -->
<delete id="adel" parameterType="String">
delete from tbl_a
where fk_seq_tbl_q = #{fk_seq_tbl_q}
</delete>
<!-- 백문백답 답변 삭제하기  끝-->

<!--  백문백답 질문 상태값 변경 -->
<update id="adelQstaup" parameterType="String">
update tbl_q set q_status = 0
where seq_tbl_q = #{fk_seq_tbl_q}
</update>
<!--  백문백답 질문 상태값 변경  끝-->


<!--  백문백답 자동완성 -->
<select id="qsearch" parameterType="HashMap" resultType="String">
select substr(q_content, 0, length(#{qsearch}) + 10) 
from tbl_q
where fk_login_id = #{fk_login_id} and lower(q_content) like '%'|| lower(#{qsearch}) || '%'
</select>
<!--  백문백답 자동완성  끝-->


<!-- 이미 좋아요 눌렀는지 확인하기 -->
<select id="followheartck" parameterType="HashMap" resultType="int">
select count(*) as cnt
from tbl_heart
where fk_seq_tbl_board = #{seq_tbl_board} and fk_login_id= #{login_id}
</select>




<!--  팔로우 메인 토탈 카운트 가져오기  -->
<select id="getFollowMainTotalCount"  parameterType="HashMap" resultType="Integer">
select  count(*)
from tbl_board B left outer join tbl_bimage I
on B.seq_tbl_board = I.seq_tbl_board
left outer join tbl_map M
on B.seq_tbl_board = M.fk_seq_tbl_board 
join tbl_follow F
on B.fk_login_id = F.follow_id
join tbl_login L
on F.follow_id = L.login_id
join tbl_uimage M
on F.follow_id = M.fk_login_id
where F.fk_login_id = #{login_id}
and B.board_status = 0
</select>
<!--  가져오기 끝 -->



<!--  차단 체크 시작 -->
<select id="followblock" parameterType="HashMap" resultType="int">
select count(*)
from tbl_block
where fk_login_id = #{fk_login_id} and block_id = #{login_id}
</select>



<!-- 차단하기 -->
<select id="followblockAdd" parameterType="HashMap">
insert into tbl_block(seq_block, fk_login_id, block_id)
values(seq_tbl_block.nextval,#{login_id},#{block_id})
</select>
<!-- 차단하기 끝 -->


<!-- 차단취소-->
<select id="followblockDel" parameterType="HashMap">
delete from tbl_block
where fk_login_id = #{login_id}  and  block_id = #{block_id}
</select>
<!-- 차단취소 끝 -->



<!-- 블락리스트가져오기 -->
<resultMap type="HashMap" id="getMyBlockListMap">
<result property="login_id" 			column="login_id" 					javaType="String" />
<result property="block_id" 			column="block_id" 					javaType="String" />
<result property="Block_name" 			column="Block_name" 				javaType="String" />
<result property="Block_proile_image" 	column="Block_proile_image" 		javaType="String" />
</resultMap>
<select id="getMyBlockList" parameterType="String" resultMap="getMyBlockListMap">
select B.fk_login_id as login_id, B.block_id as block_id, L.login_name as Block_name, nvl(M.uimg_profile_filename,'profile0.png') as Block_proile_image
from tbl_block B left join tbl_login L
on B.block_id = L.login_id
left join tbl_uimage M
on B.block_id = M.fk_login_id
where B.fk_login_id = #{login_id}
</select>
<!-- 블락리스트가져오기  끝-->


	<select id="getName" parameterType="String" resultType="String">
		    select login_name
		    from tbl_login
		    where login_id = #{q_fk_login_id}	
	</select>
	
	
<!-- 알람용 뷰 -->
<resultMap type="HashMap" id="getAlarmBoardViewMap">
<result property="board_login_name" 				column="board_login_name" 					javaType="String" />
<result property="seq_tbl_board" 					column="seq_tbl_board" 						javaType="String" />
<result property="board_profile_filename" 			column="board_profile_filename" 			javaType="String" />
<result property="board_login_id" 					column="board_login_id" 					javaType="String" />
<result property="board_content" 					column="board_content" 						javaType="String" />
<result property="board_time" 						column="board_time" 						javaType="String" />
<result property="board_heart" 						column="board_heart" 						javaType="String" />
<result property="board_recnt" 						column="board_recnt" 						javaType="String" />
<result property="board_status" 					column="board_status" 						javaType="String" />
<result property="bimg_filename" 					column="bimg_filename" 						javaType="String" />
<result property="bimg_orgfilename" 				column="bimg_orgfilename" 					javaType="String" />
<result property="bimg_filesize" 					column="bimg_filesize" 						javaType="String" />
<result property="map_we" 							column="map_we" 							javaType="String" />
<result property="ma_ky" 							column="ma_ky" 								javaType="String" />
<result property="map_name" 						column="map_name" 							javaType="String" />
<result property="title" 							column="title" 								javaType="String" />
</resultMap>

<select id="getAlarmBoard" parameterType="HashMap" resultMap="getAlarmBoardViewMap">
select 
	  L.login_name as board_login_name
      ,M.uimg_profile_filename as board_profile_filename
      ,B.fk_login_id as board_login_id
      ,B.seq_tbl_board as seq_tbl_board
      ,B.board_content as board_content
      ,case when length(B.board_content) > 10
              then substr(B.board_content, 1, 10)||'...'
              else B.board_content
              end 
         as title   
      ,B.board_time as board_time
      ,B.board_heart as board_heart
      ,B.board_recnt as board_recnt
      ,B.board_status as board_status
      ,I.bimg_filename as bimg_filename
      ,I.bimg_orgfilename as bimg_orgfilename
      ,I.bimg_filesize as bimg_filesize
      ,M.map_we as map_we
      ,M.map_ky as ma_ky
      ,M.map_name as map_name
from tbl_board B join tbl_bimage I
on B.seq_tbl_board = I.seq_tbl_board
left outer join tbl_map M
on B.seq_tbl_board = M.fk_seq_tbl_board 
join tbl_login L
on B.fk_login_id = L.login_id
join tbl_uimage M
on B.fk_login_id = M.fk_login_id
where B.seq_tbl_board = #{seq_tbl_board}
and B.board_status = 0
</select>
<!--  알람용 뷰 끝 -->


<!-- 댓글 숫자 알아오기 -->
<select id="ReGetCount" parameterType="String" resultType="int">
select board_recnt
from tbl_board
where seq_tbl_board = #{seq_tbl_board}
</select>
<!-- 댓글 숫자 알아오기 끝 -->
	
	
</mapper>