<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #26. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #27. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) --> 
<mapper namespace="jdhresns">


<!-- 로그인 여부 알아오기 === -->
	<select id="loginEnd" parameterType="HashMap" resultType="int">
	
		   select case (select count(*)
                    from tbl_login
                    where login_id = #{id} and login_pwd = #{pwd}
                    and login_status in (1,9))
	        when 1 then 1
	        else ( case (select count(*)
	                from tbl_login
	                where login_id = #{id})
	               when 1 then 0
	               else -1
	               end
	              )
	            end as LOGINCHECK
	 	from dual
	
	</select>
	
	
	<select id="getLoginMember" parameterType="String" resultType="com.spring.jdh.model.UserVO">
	
		select fk_login_id, user_email, user_birth, user_gender, user_ing, user_ed, user_boardcnt, user_report
		from tbl_user
		where fk_login_id = #{id}
	</select>
	
	<select id="getloginSession" parameterType="String" resultType="com.spring.jdh.model.LoginVO">
	
		select login_id, login_pwd, login_name, login_status
		from tbl_login
		where login_status in (1,9)
		and login_id = #{id}
	</select>
	
	
	<!-- 아이디 찾기 -->
	<select id="getUserid" parameterType="HashMap" resultType="String">
		select m.login_id 
		from tbl_login M join tbl_user D on M.login_id = D.FK_LOGIN_ID
		where m.login_status in (1,9)
		and d.user_email = #{email}
		and m.login_name like #{nickname}
	</select>
	
	<!-- 아이디와 메일이 존재하는지 여부 -->
	<select id="getUserExists" parameterType="HashMap" resultType="int">
	
	select count(*)
	from tbl_user
	where fk_login_id = #{userid} and user_email = #{email}
		
	</select>
	
	<!-- 비밀번호 재설정 -->
	
	<update id="updatePwd" parameterType="HashMap">
		update tbl_login set login_pwd = #{pwd}
		where login_id = #{userid}
	</update> 
	
	<!-- 회원가입 인서트 -->
	<insert id="registerMember" parameterType="com.spring.jdh.model.LoginVO">
	 
	 	insert into tbl_login(login_id, login_pwd, login_name, login_status)
		values(#{login_id}, #{login_pwd}, #{login_name}, 1)
	
	</insert>
	
	<insert id="registerDetail" parameterType="com.spring.jdh.model.UserVO">
	
		insert into tbl_user(fk_login_id, user_email, user_birth, user_gender, user_ing, user_ed, user_boardcnt, user_report, user_selfi)
		values(#{fk_login_id}, #{user_email}, #{user_birth}, #{user_gender}, default, default, default, default, #{user_selfi})
		
	</insert>
	
	<!-- 이미지파일 추가 -->	
	<insert id="registerImg" parameterType="com.spring.jdh.model.MemberImageVO">
		insert into tbl_uimage(uimg_seq, fk_login_id, uimg_profile_filename, uimg_header_filename, uimg_profile_orgfilename, uimg_header_orgfilename, uimg_profile_filesize, uimg_header_filesize)
		values(uimg_seq.nextval, #{fk_login_id}, #{uimg_profile_filename}, #{uimg_header_filename}, #{uimg_profile_orgfilename}, #{uimg_header_orgfilename}, #{uimg_profile_filesize}, #{uimg_header_filesize})
	</insert>
	
	
	<select id="" parameterType="com.spring.jdh.model.NoticeVO">
	
	select count (*)
	from tbl_notice
	where seq_tbl_notice = #{seq_tbl_notice}, notice_title = #{notice_title}, notice_date = #{notice_date}, notice_status = #{notice_status}, notice_cate = #{notice_cate}
	
	</select>
	
	
	
	<resultMap type="java.util.HashMap" id="NoticeList">
	
	  <result property="seq_tbl_notice"   column="seq_tbl_notice"       javaType="String" />
      <result property="notice_title"     column="notice_title"    		javaType="String" />
      <result property="notice_date"      column="notice_date"      	javaType="String" />
      <result property="notice_status"    column="notice_status"  		javaType="String" />
      <result property="notice_cate"      column="notice_cate"   	  	javaType="String" />
    
	</resultMap>
	
	
	<!-- 공지사항 리스트 불러오기 -->
	
	<!-- <select id="getNoticeList" resultMap="NoticeList">
	
	select
	seq_tbl_notice, notice_title, to_char(notice_date, 'yyyy-mm-dd hh24') as notice_date, notice_status, notice_cate
	from tbl_notice
	where notice_status = 1
	order by seq_tbl_notice desc
	
	</select> -->
	
	<!-- 페이징 -->
	<select id="getNoticePaging" resultType="int">
	
	select count(*)
	from tbl_notice
	
	</select>
	
	
	<!-- 페이징 -->
	<select id="getNoticeList" parameterType="HashMap" resultType="com.spring.jdh.model.NoticeVO">
	
		select *
		from 
		(
		select rownum as RNO
		     , V.*
		from 
		(
		select *
		from tbl_notice
		where NOTICE_STATUS = 1
		order by SEQ_TBL_NOTICE desc
		) V
		) T
		where T.RNO >= #{startRno} and T.RNO <![CDATA[<=]]> #{endRno}
	
	</select>
	
	
	<!-- 공지사항 디테일 -->	
	 <select id="getNoticeDetail" parameterType="HashMap" resultType="com.spring.jdh.model.NoticeVO">
		select *
		from tbl_notice
		where seq_tbl_notice = #{seq}
	 </select>
	
	<!-- 공지사항 등록하기 -->
	
	<insert id="getNoticeRegister" parameterType="com.spring.jdh.model.NoticeVO">
	
	insert into tbl_notice(seq_tbl_notice, notice_title, notice_content, notice_date, notice_status, notice_cate)
	values(noticeSeq.nextval, #{notice_title}, #{notice_content}, default, 1, #{notice_cate})

	</insert>
	
	<!-- 공지사항 삭제하기 -->
	<update id="getNoticeDelete" parameterType="String">
	
	update tbl_notice set notice_status = 0
	where seq_tbl_notice = #{seq} and notice_status = 1
	
	</update>
	
	<!-- 공지사항 수정하기 -->
	
	<update id="getNoticeModify" parameterType="HashMap">
		update tbl_notice set notice_title = #{notice_title}, notice_content = #{notice_content}, notice_date = default, notice_cate = #{notice_cate}
		where seq_tbl_notice = #{seq_tbl_notice}
	</update>
	
	
	
	<resultMap type="java.util.HashMap" id="getMemNotiList">
	
	  <result property="seq_tbl_notice"   column="seq_tbl_notice"       javaType="String" />
      <result property="notice_title"     column="notice_title"    		javaType="String" />
      <result property="notice_date"      column="notice_date"      	javaType="String" />
      <result property="notice_status"    column="notice_status"  		javaType="String" />
      <result property="notice_cate"      column="notice_cate"   	  	javaType="String" />
    
	</resultMap>
	
	
	<!-- 멤버용 공지사항 리스트 불러오기 -->
	
	<!-- <select id="getMemNotiList" resultMap="getMemNotiList">
	
	select
	seq_tbl_notice, notice_title, to_char(notice_date, 'yyyy-mm-dd hh24') as notice_date, notice_status, notice_cate
	from tbl_notice
	where notice_status = 1
	order by seq_tbl_notice desc
	
	</select> -->
	
	<select id="getMemNotiList" parameterType="HashMap" resultType="com.spring.jdh.model.NoticeVO">
	
		select *
		from 
		(
		select rownum as RNO
		     , V.*
		from 
		(
		select *
		from tbl_notice
		where NOTICE_STATUS = 1
		order by SEQ_TBL_NOTICE desc
		) V
		) T
		where T.RNO >= #{startRno} and T.RNO <![CDATA[<=]]> #{endRno}
	
	</select>
	
	
	<!-- 멤버용 공지사항 디테일 -->
		
	 <select id="getMemNoticeDe" parameterType="HashMap" resultType="com.spring.jdh.model.NoticeVO">
		select *
		from tbl_notice
		where seq_tbl_notice = #{seq}
	 </select>
	
	<!-- 회원리스트 -->
	<resultMap type="java.util.HashMap" id="getMemList">
	
	  <result property="fk_login_id"   	  column="fk_login_id"       	javaType="String" />
      <result property="user_email"   	  column="user_email"       	javaType="String" />
      <result property="login_name"   	  column="login_name"       	javaType="String" />
      <result property="user_report"   	  column="user_report"       	javaType="String" />
      <result property="login_status"     column="login_status"       	javaType="String" />
      
	</resultMap>
	
	<select id="getMemList" resultMap="getMemList">
		
	select E.fk_login_id, E.user_email,E.user_report, D.login_name, D.login_status
    from tbl_user E join tbl_login D
    on E.fk_login_id = D.login_id
	
	</select>
	
	<!-- 회원 삭제하기 -->	
	<update id="getMemberDelete" parameterType="String">
	
	update tbl_login set login_status = 0
	where login_id = #{id}
	
	</update>
	
	<!-- 회원 수정하기 -->
	
	<update id="getMemberEdit" parameterType="HashMap">
	
		update tbl_login set login_name = #{login_name}
		where login_id = #{login_id}
		
	</update>
	
	
	<!-- 회원 복구하기 -->
	
	<update id="getMemberRestore" parameterType="String">
	
	update tbl_login set login_status = 1
	where login_id = #{id}
	
	</update>
	
	<!-- 검색어 있는 리스트 -->
	
	<!-- <select id="getSearchList" parameterType="HashMap" resultType="com.spring.jdh.model.NoticeVO">
	
		 select seq, name, subject, readCount, regDate, commentCount
		from 
		(
		select rownum as RNO
		     , V.seq, V.name, V.subject, V.content, V.readCount, V.regDate, V.commentCount
		from 
		(
		select seq, name 
		     , case when length(subject) > 20 then substr(subject, 1, 18)||'..'
		            else subject end as subject
		     , content , readCount
		     , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		     , commentCount
		from tblBoard
		where status = 1
		order by seq desc
		) V
		) T
		where T.RNO >= #{startRno} and T.RNO <![CDATA[<=]]> #{endRno} 
	
	</select> -->
	
	<!-- 검색어가 없는 리스트 -->
	
	<!-- <select id="getSearchList" parameterType="HashMap" resultType="com.spring.jdh.model.NoticeVO">
	
	 select seq, name, subject, readCount, regDate, commentCount
		from 
		(
		select rownum as RNO
		     , V.seq, V.name, V.subject, V.content, V.readCount, V.regDate, V.commentCount
		from 
		(
		select seq, name 
		     , case when length(subject) > 20 then substr(subject, 1, 18)||'..'
		            else subject end as subject
		     , content , readCount
		     , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		     , commentCount
		from tblBoard
		where status = 1
		and ${colname} like '%'|| #{search} ||'%'
		order by seq desc
		) V
		) T
		where T.RNO >= #{startRno} and T.RNO <![CDATA[<=]]> #{endRno} 
	
	</select> -->
	
	<!-- <select id="">
	
	select count(*)
		from tbl_user E join tbl_login D
    on E.fk_login_id = D.login_id
		
	</select>
   
    
    <select id="">
    
    select count(*)
		from tbl_user E join tbl_login D
    on E.fk_login_id = D.login_id
    and ${colname} like '%' || #{search} || '%'
	
	</select> -->
	
</mapper>