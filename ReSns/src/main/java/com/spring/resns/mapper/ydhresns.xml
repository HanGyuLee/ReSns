<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #26. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #27. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) --> 
<mapper namespace="ydhresns">


								<!-- 검색후결과물 -->
<!-- 태그검색  -->
<resultMap type="HashMap" id="Tag" >
   <result property="login_name"        column="A.login_name" 		javaType="String"/>
   <result property="login_id"          column="A.login_id" 		javaType="String"/>
   <result property="seq_tbl_board"     column="B.seq_tbl_board"    javaType="String"/>
   <result property="tag_content"       column="C.tag_content"   	javaType="String"/>
   <result property="bimg_filename"     column="D.bimg_filename"    javaType="String"/>
</resultMap>
<select id="searchTag" parameterType="HashMap" resultMap="Tag">
select A.login_name, A.login_id, B.seq_tbl_board, B.board_content, C.tag_content, D.bimg_filename
from tbl_login A left join tbl_board B
on A.login_id = B.fk_login_id
left join tbl_tag C
on B.seq_tbl_board = C.seq_tbl_board
left join tbl_bimage D
on C.seq_tbl_board = D.seq_tbl_board
where substr(tag_content,2) = #{search}
</select>

<!-- 위치검색 -->
<resultMap type="HashMap" id="searchMap"></resultMap>
<select id="searchMap" parameterType="HashMap" resultMap="searchMap">
select A.login_id, A.login_name, c.board_content, c.seq_tbl_board, D.map_we, D.map_ky, D.map_name, E.bimg_filename
from tbl_login A left join tbl_user B
on A.login_id = B.fk_login_id 
join tbl_board C
on A.login_id = C.fk_login_id
join tbl_map D
on C.seq_tbl_board = D.fk_seq_tbl_board
join tbl_bimage E
on D.fk_seq_tbl_board = E.seq_tbl_board
where lower(D.map_name) like '%'||lower(#{search})||'%'
</select>

<!-- 이름그룹으로검색 -->
<resultMap type="HashMap" id="searchName">
  <result property="loginName" 	  column="A.login_name"  	           javaType="String"/>
  <result property="userEd" 	  column="B.user_ed"  		           javaType="String"/>
  <result property="userIng" 	  column="B.user_ing"   	           javaType="String"/>
  <result property="userBrdCnt"   column="B.user_boardcnt"             javaType="String"/>
    <result property="profilePic" column="C.uimg_profile_filename"     javaType="String"/>
</resultMap>
<select id="searchName" parameterType="HashMap" resultMap="searchName">
    select A.login_name, B.user_ed, B.user_ing, B.user_boardcnt,C.uimg_profile_filename
    from tbl_login A left join tbl_user B 
    on A.login_id = B.fk_login_id
    left join tbl_uimage C
    on B.fk_login_id = C.fk_login_id
    where lower(A.login_name) like '%'|| lower(#{search}) || '%'
    and login_status = 1
</select>

<!-- 이름한명검색 -->
<resultMap id="name" type="HashMap" >
<result property="name"		 column="A.login_name"  		javaType="String" />
<result property="img" 		 column="D.bimg_filename" 	    javaType="String" />
<result property="ing" 		 column="B.user_ing" 		    javaType="String" />
<result property="ed"        column="B.user_ed" 			javaType="String" />
<result property="profile"   column="B.user_selfi" 		    javaType="String" />
</resultMap>
<select id="searchNameOne" parameterType="HashMap" resultMap="name">
select  A.login_name, D.bimg_filename, B.user_ing, B.user_ed, B.user_selfi
from tbl_login A left join tbl_user B
on A.login_id = B.fk_login_id
left join tbl_board C
on B.fk_login_id = C.fk_login_id
left join tbl_bimage D
on C.seq_tbl_board = D.seq_tbl_board
where A.login_name = #{search}
and login_status = 1
</select>

									<!-- ajax -->
<!-- 별명검색cnt -->
<select id="jNameCnt" parameterType="HashMap" resultType="Integer">
select count(*) as cnt
from tbl_login A left join tbl_user B
on A.login_id = B.fk_login_id
where lower(A.login_name) like '%'|| lower(#{search})||'%' 
and login_status = 1
</select> 

<!-- 별명검색 -->
<resultMap type="HashMap" id="jNameList">
  <result property="loginName" 	column="name"  	     javaType="String"/>
</resultMap>
<select id="jName" parameterType="HashMap" resultMap="jNameList">
select A.login_name as name
from tbl_login A left join tbl_user B
on A.login_id = B.fk_login_id
where lower(A.login_name) like '%'|| lower(#{search})||'%' 
and A.login_status = 1
</select>

<!-- 별명한명검색 -->
<resultMap type="String" id="jnameOne">
 <result property="LoginName" 	column="name"  	     javaType="String"/>
</resultMap>
<select id="jNameOne" parameterType="String" resultMap="jnameOne">
select A.login_name as name
from tbl_login A left join tbl_user B
on A.login_id = B.fk_login_id
where lower(A.login_name) like '%'|| lower(#{search})||'%' 
and A.login_status = 1
</select>

<!-- 태그검색결과(총게시물)  -->
<select id="jTagCnt" parameterType="HashMap" resultType="Integer">
select count(*) as cnt
from
(
select substr(tag_content,2)
from tbl_tag
where substr(tag_content,2) =#{search}
)

</select> 

<!-- 태그검색결과  -->
<select id="jTag" parameterType="HashMap" resultType="String">
select substr(tag_content,2) as tag_content
from tbl_tag
where substr(tag_content,2) = #{search}
</select>

<!-- 지도검색총갯수 -->

<select id="jMapCnt" parameterType="HashMap" resultType="Integer">
select count(*) as cnt
from
(
select map_name
from tbl_map
where lower(map_name) like '%'||lower(#{search})||'%'
)
</select>

<!-- 지도검색 -->
<resultMap type="HashMap" id="jmap">
	<result property="mapName" column="mapNAme" javaType="String"/>
</resultMap>
<select id="jMap" parameterType="HashMap" resultMap="jmap">
select map_name as mapNAme
from tbl_map
where lower(map_name) like '%'||lower(#{search})||'%'
</select>

                  <!--  더보기버튼  -->

<!-- 이름검색후결과값에서 더보기버튼 -->
<!-- <resultMap id="jButton" type="HashMap">
	<result property="cnt" column="cnt" javaType="Integer"/>
</resultMap>
<select id="jButtonBnt" parameterType="HashMap" resultMap="jButton">
select count(*) as cnt
from tbl_login A left join tbl_user B
on A.login_id = B.fk_login_id
where lower(A.login_name) like '%'|| lower(#{search})||'%' 
and login_status = 1
</select> -->

<!-- 페이징처리하기 -->
<!-- <select id="moreName" parameterType="String" resultType="String">
   select V.*   							
   from                 
   (                 	 
    select rownum as rno , A.login_name, B.user_ed, B.user_ing, B.user_boardcnt,C.uimg_profile_filename
    from tbl_login A left join tbl_user B 
    on A.login_id = B.fk_login_id
    left join tbl_uimage C
    on B.fk_login_id = C.fk_login_id
    where lower(A.login_name) like '%'|| lower(#{search}) || '%'
    and login_status = 1
   )V                    
   where V.rno between ${startno}  and ${endrno}
</select>
 -->





					<!-- YOUTUBE LIST -->


<!-- 글insert -->
<insert id="mwrite" parameterType="com.spring.ydh.model.MusicVO" >
insert into tbl_music(seq_tbl_music,fk_login_id,music_link,music_name,music_content,music_date,music_commentCount)
values(seq_tbl_music.nextval,#{fk_login_id},#{music_link},#{music_name},#{music_content},default, default )
</insert>
 							<!-- 글조회만들기 -->
<!-- 글목록 : 글조회 페이징(X)-->
<!-- <select id="mlist" resultType="com.spring.ydh.model.MusicVO">
select seq_tbl_music,music_name, music_content, to_char(music_date,'yyyy-mm-dd') as music_date, music_commentcount
from tbl_music
order by seq_tbl_music desc
</select> -->

<!-- 글목록 페이징(O), 검색어(O) -->
<resultMap type="HashMap" id="list">
  <result property="music_name" 			column="T.music_name" 		  javaType="String"/>	
  <result property="music_date" 			column="T.music_date" 		  javaType="String"/>
  <result property="music_commentcount" 	column="T.music_commentcount" javaType="String"/>
  <result property="seq_tbl_music" 		    column="T.seq_tbl_music" 	  javaType="String"/>
  <result property="music_content" 		   column="T.music_content" 	  javaType="String"/>
</resultMap>
<select id="mlist" parameterType="HashMap" resultMap="list">
 select T.music_name, T.music_date, T.music_commentcount, T.seq_tbl_music, T.music_content
 from
 (
  select V.rno, V.music_name, V.music_date, V.music_commentcount, V.seq_tbl_music, V.music_content
  from
(
  select rownum as rno 
                  ,seq_tbl_music
                  ,music_name
                  ,case when length(music_content)>7 then substr(music_content,1,5)||'..' else music_content end as music_content
                  ,to_char(music_date,'yyyy-mm-dd') as music_date
                  ,music_commentcount
  from tbl_music
  where lower(${colname}) like '%'|| lower (#{search}) ||'%'
  order by seq_tbl_music desc
)V
)T
where T.RNO >= #{startRno} and T.RNO <![CDATA[<=]]> #{endRno}
</select>


<!-- 글목록 : 페이징(O), 검색어(X) -->
<resultMap type="HashMap" id="list2">
	 <result property="rno"				 		column="V.rno" 					        javaType="String"/>
	 <result property="music_name" 			 	column="V.music_name" 					javaType="String"/>
	 <result property="music_date" 				column="V.music_date" 					javaType="String"/>
	 <result property="music_commentcount" 		column="V.music_commentcount" 	        javaType="String"/>
	 <result property="seq_tbl_music" 			column="V.seq_tbl_music" 				javaType="String"/>
	 <result property="music_content" 			column="V.music_content" 				javaType="String"/> 
	</resultMap>
<select id="mlist2" parameterType="HashMap" resultMap="list2">
	select V.rno, V.music_name, V.music_date, V.music_commentcount, V.seq_tbl_music, V.music_content
	from
	(
	  select rownum as rno 
	                  ,seq_tbl_music
	                  ,music_name
	                  ,music_content
	                  ,to_char(music_date,'yyyy-mm-dd') as music_date
	                  ,music_commentcount
	  from tbl_music
	  order by seq_tbl_music desc
	)V
	where V.rno >= #{startRno} and V.rno <![CDATA[<=]]> #{endRno}
</select>


			<!-- 페이징처리를 위한 totalcount 구하기 -->

<!-- 검색어 있음 -->
<select id="getTotalCount2" parameterType="HashMap" resultType="int">
select count(*) as CNT
from tbl_music
where ${colname} like '%'||#{search}||'%'
</select>

<!-- 검색어 없음 -->			
<select id="getTotalCount1" resultType="int">
select count(*) as CNT
from tbl_music
</select>

<!-- MUSIC페이지 ajax 검색 -->
<select id="mJson" parameterType="HashMap" resultType="String" >
   <if test='colname.equals("music_name")'>
    	select music_name
         from tbl_music
         where lower(music_name) like '%'||lower(#{search})||'%'
   </if>
   <if test='colname.equals("music_content")'>   		
		select case when length(music_content)>7 
		       then substr(music_content,1,5)||'..' 
		       else music_content
		       end as music_content
		from tbl_music
		where lower(music_content) like '%'|| lower(#{search}) || '%'
   </if>
</select>


<!-- 글한개보이기 -->
<select id="mview" parameterType="String" resultType="com.spring.ydh.model.MusicVO">
select seq_tbl_music, music_name,to_char(music_date,'yyyy-mm-dd hh24:mi:ss') as music_date , music_content, music_link
from tbl_music
where seq_tbl_music = #{seq_tbl_music}
</select>


<!-- 글수정할때 원글띄어주기 -->
<select id="mupdate" parameterType="String" resultType="com.spring.ydh.model.MusicVO"> 
select seq_tbl_music, music_name,to_char(music_date,'yyyy-mm-dd hh24:mi:ss') as music_date , music_content, music_link
from tbl_music
where seq_tbl_music = #{seq_tbl_music}
</select>

<!-- 글수정(update)해주기 -->
<update id="mupdateEnd" parameterType="HashMap" >
update tbl_music set music_name = #{music_name}
                    ,music_content = #{music_content}
                    ,music_link= #{music_link}
where seq_tbl_music = #{seq_tbl_music}
</update>

<!-- 글삭제(delete) -->
<delete id="mdel" parameterType="String">
delete from tbl_music
where seq_tbl_music = #{seq_tbl_music}
</delete>

<!-- 체크박스글삭제 -->
<delete id="delcheckbox" parameterType="String">
delete from tbl_music
where seq_tbl_music in #{seq_tbl_music}
</delete>



<!-- 댓글읽어오기 -->
<resultMap type="HashMap" id="comment">
	<result property="login_name" 		 column="A.login_name" 		 javaType="String"/>
	<result property="seq_tbl_remusic"   column="B.seq_tbl_remusic"  javaType="String"/>
	<result property="re_ycontent" 	     column="B.re_ycontent"      javaType="String"/>
	<result property="re_ydate" 		 column="B.re_ydate" 		 javaType="String"/>
	<result property="re_login_id" 		 column="B.re_login_id" 	 javaType="String"/>
	<result property="seq_tbl_music" 	 column="C.seq_tbl_music" 	 javaType="String"/>
</resultMap>
<select id="commentList" parameterType="HashMap" resultMap="comment">
select A.login_name, B.seq_tbl_remusic, B.re_ycontent, B.re_ydate, B.re_login_id,C.seq_tbl_music
from tbl_login A join tbl_remusic B
on A.login_id = B.re_login_id
join tbl_music C
on B.seq_tbl_music = C.seq_tbl_music
where C.seq_tbl_music = #{seq_tbl_music}
</select>


<!-- 댓글쓰기 -->
<insert id="addComment" parameterType="com.spring.ydh.model.MCommentVO" >
insert into tbl_remusic(seq_tbl_remusic, re_ycontent, re_ydate, re_login_id, seq_tbl_music)
values(seq_tbl_remusic.nextval, #{re_ycontent}, default,  #{re_login_id} , #{seq_tbl_music} )
</insert>

<!-- TX처리  댓글달렸을때 원글 업뎃  -->
<update id="updateCommentCount" parameterType="String">
update tbl_music set music_commentcount = music_commentcount + 1
where seq_tbl_music = seq_tbl_music
</update>





</mapper>